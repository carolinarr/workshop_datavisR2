---
title: "Data Visualization in R, Intermediate Level - Examples"
author: "<INSERT NAME HERE> and Carolina S. Roe-Raymond" 
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
---

## ISSUES TO RESOLVE

**!!! How to handle people working alongside you...\
summarytools packages required installing imagemagick vis homebrew if you tried to compile; do you always circumvent this if say "no" to compiling from source;\
this happened with camcorder too. when loading said "Error: package or namespace load failed for 'camcorder' in loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI\[\[i\]\]): there is no package called 'rsvg'**" Had to yes to using compiled from source version of rsvg\
do binary?...should we do Adroit? with a set of packages?

**!!! look into "identity" versus other things for stat =, position = , etc. (see ?geom_segment for example)**

**!!! don't have the right source for this dataset, actually have no idea what the units of tooth growth is...**

**!!! ggplot2 add all data points onto graphs**

**!!! fonts! can apply base_family**

## 1. Introduction

### Setup

Under Settings Gear icon, select "Chunk Output in Console."

### **Research Question**

**Do natural supplements of vitamin C (orange juice) produce more teeth growth than artificial supplements of vitamin C (ascorbic acid)?**

### Data

Let's take a quick look at our dataset.

```{r}
library(summarytools) 

# create data object  
d <- ToothGrowth

# explore data
?ToothGrowth
names(d)
head(d, 15)
dfSummary(d)
```

### Basic Graph

Let's create a basic ggplot graph to answer our research question.

```{r}
library(dplyr)
library(ggplot2)

# Data Prep
# **************************************
# calculate average tooth length (len) per supplement & dosage (supp, dose)
d_avg_len <- d |> 
  group_by(supp, dose) |> 
  summarise(len_avg = mean(len)) |> 
  # adding dummy rows of data to create equal increments in 'dose' data
  ungroup() |> 
  add_row(supp = "OJ", dose = 1.5, len_avg = NA) |> 
  add_row(supp = "VC", dose = 1.5, len_avg = NA) 

# Data Vis
# **************************************
plot_dumbbell_default <- d_avg_len |> 
  ggplot(aes(x = len_avg, y = as.factor(dose))) +
  geom_line() + 
  geom_point(
    aes(color = supp)
  ) 

plot_dumbbell_default
```

## 2. Improving Visualization Design and Workflow

### a. Design

#### i. "Data Components," Including Labels

Data components need to be dealt with within `geom_*()`, `coord_*()`, `stat_*()`, `scale_*()`, and `lab()` functions, as needed.

Let's quickly apply the following changes to the data components here:

-   increase the size of data points
-   apply a better color scale
-   write better legend labels
-   write better plot labels (axes, title, alt text)

```{r}

# bare minimum vis design improvements with ggplot2 features
plot_dumbbell_upgrade_i <- d_avg_len |> 
  ggplot(aes(x = len_avg, y = as.factor(dose))) +
  geom_line() + 
  geom_point(
    aes(color = supp),
    # increase point size
    size = 5, 
  ) +
  # required labeling
  scale_color_brewer(
    palette = "Dark2",
    direction  = -1,
    name = "Vitamin C Supplement Type",
    labels = c("OJ" = "Natural (Orange Juice)",
               "VC" = "Artificial (Ascorbic Acid)")
  ) +
  labs(
    x = "Tooth Length \n(mm?)",
    y = "Dose of \nVitamin C \n(mg/day)",
    title = "Natural Vitamin C supplements don't always provide more \nteeth growth than artificial Vitamin C supplements.",
    subtitle = "Natural supplements correspond to more teeth growth when taken at 0.5 and 1 mg/day, \nbut artificial supplements match natural teeth growth when taken at 2 mg/day.",
    caption = "",
    alt = "Dumbbell plot showing natural Vitamin C supplements resulted in more teeth growth at doses of 0.5 and 1 milligrams per day, but at 2 milligrams per day both natural and artificial supplements produces similar levels of teeth growth."
  ) 

plot_dumbbell_upgrade_i
```

#### ii. "Non-Data Components"

The ggplot2 package uses themes to change what they call the "non-data" components (formatting of axes, legends, panel, plot, strip for facets).

There are [eight built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) you can easily apply. I tend to use these as a starting point.

------------------------------------------------------------------------

\*EXERCISE\*\
Choose one of ggplot2's [complete themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) and apply it your plot.

```{r}
plot_dumbbell_upgrade_ii <- plot_dumbbell_upgrade_i +
  # theme_light()
  theme_minimal()

plot_dumbbell_upgrade_ii
```

------------------------------------------------------------------------

The real benefit, though, is the ability to override settings with the `theme()` function.

```{r}

# see all the elements you have the ability to change
?theme

# check current theme settings
theme_get()

# example of applying certain 'required' adjustments 
plot_dumbbell_upgrade_ii <- plot_dumbbell_upgrade_i +
  # use a complete theme as a starting point
  theme_minimal() +
  # start applying custom adjustments
  theme(
    # easy way to adjust sizing of all of the plot's text
    text = element_text(size = 14),      
    # to refine specific aspects of text size going forward, use relative sizes
    axis.text = element_text(size = rel(0.85)),
    plot.subtitle = element_text(size = rel(0.85)),
    legend.title = element_text(size = rel(0.8)),
    legend.text = element_text(size = rel(0.7)),
    # I almost always want the title to be left-aligned with entire plot
    plot.title.position = "plot",     
    # y-axis label is always easier to read when horizontal
    axis.title.y = element_text(angle = 0,
                                vjust = 0.5),
    # to save space, often useful to put legend inside plot.
    # use c(x, y) to define where top left corner should be. 
    # c(0,0)=bottom left, c(1,1)=top right
    legend.position = (c(0.25,0.75)),
    # giving legend a slide background and no border
    legend.background = element_rect(fill="#DADADA80", 
                                     linetype = 0)
    
  )
  
plot_dumbbell_upgrade_ii
```

To improve workflow across your career, you can create a default theme with your needs/preferences, that you can import and set as a default theme anytime you create a graph!

First check out *ggplot2_themes_csr.qmd* document.

```{r}

# # create test plot
# plot_test <- d %>% 
#   ggplot(aes(x = dose, y = len, color = supp)) +
#   geom_point(size = 3) +
#   scale_fill_brewer(
#     palette = "Dark2",
#     direction  = -1,
#     name = "Vitamin C Supplement Type",
#     labels = c("OJ" = "Natural (Orange Juice)",
#                "VC" = "Artificial (Ascorbic Acid)")
#   ) +
#   labs(title = "Higher Vitamin C doses corresponded to more teeth growth",
#        subtitle = "There was significant variation across treatments.")

# view default plot again
plot_dumbbell_default

# setup personal theme
# ************************************************
# save current theme, just in case
orig_theme <- theme_get()
# import your theme
# EXAMPLE: mytheme <- readRDS('<insert-full-path-to-your-R-theme-folder>/mytheme.rds')
mytheme_base <- readRDS('code/themes/mytheme_base.rds')
# set a theme to be your default, if desired
theme_set(mytheme_base)

# view default plot again
plot_dumbbell_default

```

You can still easily modify your own theme on the spot for each specific project.

Recommended reference on the ability to get, set, and update themes: <https://ggplot2.tidyverse.org/reference/theme_get.html>

In the examples, note the differences between using...

-   `theme_update()` - modifies current default theme
-   `+` - modifies a specific argument of element (sets all missing arguments to current theme setting)
-   `%+replace%` - modifies entire element (sets all missing arguments to NULL)

### b. Sizing

All is wonderful. We have our final plot, time to save it.

```{r}

# Let's save the usual way
ggsave("/scratch/network/csimao/workshop_datavisR2/plots/dumbbell_vitC_toothgrowth.png", 
       plot = plot_dumbbell_upgrade_ii,
       width = 4,
       height = 3,
       units = "in", 
       dpi = 300)
```

What happened?!

Need to consider physical *and* digital dimensions of plot, as RStudio() and ggsave() uses them.

Let's try a better way.

```{r}

library(camcorder)

# set our camera to 'record' (i.e. set dimensions of every graph we produce,
# until we stop recording)
camcorder::gg_record(
    dir = '/scratch/network/csimao/workshop_datavisR2/plots/',
    width = 12,
    height = 12*9 / 16,
    units = "in",
    dpi = 300,
    bg = 'white',
    # Makes sure the background of plot is actually white, not transparent
)

plot_dumbbell_upgrade_iii <- d_avg_len |> 
  ggplot(aes(x = len_avg, y = as.factor(dose))) +
  geom_line() + 
  geom_point(
    aes(color = supp),
    # increase point size
    size = 8, 
  ) +
  # required labeling
  scale_color_brewer(
    palette = "Dark2",
    direction  = -1,
    name = "Vitamin C Supplement Type",
    labels = c("OJ" = "Natural (Orange Juice)",
               "VC" = "Artificial (Ascorbic Acid)")
  ) +
  labs(
    x = "Tooth Length \n(mm?)",
    y = "Dose of \nVitamin C \n(mg/day)",
    title = "Natural supplements aren't always best.",
    subtitle = "At 0.5 and 1 mg/day natural supplements correspond to more teeth growth, \nbut at 2 mg/day both natural and artifical supplements have equal effects \non teeth growth.",
    caption = "",
    alt = "Dumbbell plot showing natural Vitamin C supplements resulted in more teeth growth at doses of 0.5 and 1 milligrams per day, but at 2 milligrams per day both natural and artificial supplements produces similar levels of teeth growth."
  )  + 
  theme_minimal() +
  theme(
    text = element_text(size = 20),      # increase size of all text
    axis.text = element_text(size = rel(0.85)),
    axis.title.y = element_text(angle = 0,
                                vjust = 0.5),
    legend.position = (c(0.25,0.75)),      # to place legend inside plot, 
                                         #    c(0,0)=bottom left, c(1,1)=top right
    legend.background = element_rect(fill="#DADADA80", 
                                     linetype = 0),
    plot.title.position = "plot",         # left-align title with entire plot
    plot.title = element_text(size = 26,
                              margin = margin(t = 10,
                                              r = 0,
                                              b = 10,
                                              l = 0,
                                              unit = "pt")),
    plot.subtitle = element_text(margin = margin(t = 5,
                                                 r = 0, 
                                                 b = 5, 
                                                 l = 0,
                                                 unit = "pt"))
    
  )
  
plot_dumbbell_upgrade_iii

camcorder::gg_stop_recording()
```

### c. Layout

```{r}

```

## 3. More than ggplot2 graphs

## 4. Visualization Resources at Princeton
