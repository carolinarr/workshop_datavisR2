---
title: "Data Visualization in R, Intermediate Level - Examples"
author: "<INSERT NAME HERE> and Carolina S. Roe-Raymond" 
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
---

## 1. Introduction

### Setup

If needed, in RStudio, under Gear icon (to the right of "\--\> Render" button), select "Chunk Output in Console."

### Data

Let's take a quick look at our dataset.

```{r}
library(summarytools) 

# get data
d <- ToothGrowth

# explore data
head(d, 15)
?ToothGrowth
summarytools::dfSummary(d)
```

### **Research Question**

**Do natural supplements of vitamin C (orange juice) produce more teeth growth than artificial supplements of vitamin C (ascorbic acid)?**

### Default Visualization

Let's create a basic ggplot graph to answer our research question.

```{r}
library(dplyr)
library(ggplot2)

# Data Prep
# **************************************
# calculate average tooth length (len) per supplement & dosage (supp, dose)
# Prepending variables that represent data with d_*
d_avg_len <- d |> 
  group_by(supp, dose) |> 
  summarise(len_avg = mean(len)) |> 
  # adding dummy rows of data to create equal increments in 'dose' data
  ungroup() |> 
  add_row(supp = "OJ", dose = 1.5, len_avg = NA) |> 
  add_row(supp = "VC", dose = 1.5, len_avg = NA) |>
  arrange(supp, dose, by_group = TRUE)

# Data Vis
# **************************************
plot_dumbbell_default <- d_avg_len |> 
  ggplot(aes(x = len_avg, y = as.factor(dose))) +
  geom_line() + 
  geom_point(
    aes(color = supp)
  ) 

plot_dumbbell_default
```

## 2. Improving Visualization Design and Workflow

To save us copying and pasting more than necessary when plotting, let's create variables for elements we'll use repeatedly.

```{r}

# Prepending with s_* to denote settings

# labels
s_labs_supp <-"Supplement Type"
s_labs_len <- "Tooth Length \n(mm?)"
s_labs_dose <-"Dose of \nVitamin C \n(mg/day)"

# scales
s_color_supp <- scale_color_brewer(
    palette = "Dark2",
    direction  = -1,
    name = "Vitamin C Supplement Type",
    labels = c("OJ" = "Natural (Orange Juice)",
               "VC" = "Artificial (Ascorbic Acid)")
  )
s_fill_supp <- scale_fill_brewer(
    palette = "Dark2",
    direction  = -1,
    name = "Vitamin C Supplement Type",
    labels = c("OJ" = "Natural (Orange Juice)",
               "VC" = "Artificial (Ascorbic Acid)")
  )

```

### a. Design

#### i. "Data Components," Including Labels

Data components need to be dealt with within `geom_*()`, `coord_*()`, `stat_*()`, `scale_*()`, and `lab()` functions, as needed.

Let's apply the following changes to the data components here:

-   increase the size of data points
-   apply a better color scale
-   write better legend labels
-   write better plot labels (axes, title, alt text)

```{r}

# bare minimum vis design improvements with ggplot2 features
plot_dumbbell_upgrade_i <- d_avg_len |> 
  ggplot(aes(x = len_avg, y = as.factor(dose))) +
  geom_line() + 
  # increase point size
  geom_point(
    aes(color = supp)
  ) 

plot_dumbbell_upgrade_i
```

#### ii. "Non-Data Components"

The `ggplot2` package uses themes to change what they call the "non-data" components (formatting of axes, legends, panel, plot, strip for facets).

There are [eight built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) you can easily apply. I tend to use these as a starting point.

`ggplot2`'s default theme is `theme_grey()`. Choose another one of `ggplot2`'s [complete themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) and apply it your plot.

```{r}
plot_dumbbell_upgrade_ii <- plot_dumbbell_upgrade_i +
  # CHOOSE A COMPLETE THEME AND INSERT HERE


plot_dumbbell_upgrade_ii
```

The real benefit, though, is the ability to override specific settings with the `theme()` function.

```{r}

# see all the elements you have the ability to change
?theme

# check current theme settings
theme_get()

# example of applying certain 'required' adjustments 
plot_dumbbell_upgrade_ii <- plot_dumbbell_upgrade_i +
  # use a complete theme as a starting point
  theme_minimal() +
  # start applying custom adjustments
  theme(
    # MAKE MODIFICATIONS HERE
  )
  
plot_dumbbell_upgrade_ii
```

To save us time in our future endeavors with R and `gpplot2`, let's create our own default theme that we can set as a default anytime we make a plot!

First check out *code/themes/ggplot2_themes_csr.qmd* document.

```{r}

# view default plot again, no design 
plot_dumbbell_default

# setup personal theme
# ************************************************

# import your theme
theme_csr_base <- readRDS('workshop_datavisR2/code/themes/theme_csr_base.rds')


# see default plot with mytheme
# (notice no need for () at the end)
plot_dumbbell_default + 
  theme_csr_base

# set your theme to be your default, if desired

# save current theme, if desired
theme_orig <- theme_get()
# view default plot one more time, to see change
plot_dumbbell_default
# set your theme to be default
theme_set(theme_csr_base)
# no longer need to add theme to see it applied
plot_dumbbell_default
```

You can still easily modify your own theme 'on-the-fly,' to tailor it to a specific session or plot.

Reference on the ability to get, set, and update themes: <https://ggplot2.tidyverse.org/reference/theme_get.html>

In the examples below, note the differences between using...

-   `+ theme()` and `%+replace% theme()`
-   `theme_update()` and `theme_replace()`

```{r}

# Setup
# ***********
# temporary example theme
theme_csr_wild <- theme_dark() + 
  theme(plot.background = element_rect(fill = "#afeeee",
                                       colour = "#393d76",
                                       linewidth = 5,
                                       linetype = 3))
# view plot
p <- plot_dumbbell_default
p + theme_csr_wild
# ***********

# Explaining "+" & "%+replace%" for themes
# ********************************************
# both adjust the *theme object*
#
# +              
# only changes the specific argument you specify
# for an element
#
# %+replace%
# not only changes the specific argument you specify, but 
# also makes all other arguments for that element NULL

# EXAMPLES:
# +


# %+replace%


# check settings for each
theme_csr_wild$plot.background
theme_csr_wild_plus$plot.background
theme_csr_wild_replace$plot.background


# Explaining "theme_update" & "theme_replace" for themes
# ********************************************
# both adjust the *current/active* theme
#
# theme_update()            
# only changes the very specific argument you specify
# for an element
#
# theme_replace()
# not only changes the specific argument you specify, but 
# also makes all other arguments for that element NULL

# EXAMPLES:



# get back to less wild theme
theme_set(theme_csr_base)
```

In summary,

-   `+ theme()` and `%+replace% theme()` - change the current/active theme
-   `theme_update()` and `theme_replace()` - change a saved theme

In both cases, the former updates just the argument specified, and the latter does that while also turning all other arguments to NULL.

### b. Sizing

Let's save our plot the usual way, with `ggsave()`.

```{r}

# let's save our latest plot
plot_dumbbell_upgrade_ii

ggsave("workshop_datavisR2/plots/dumbbell_vitC_x_toothgrowth.png", 
       plot = plot_dumbbell_upgrade_ii,
       width = 4,
       height = 2.5,
       units = "in", 
       dpi = 300)

```

What happened?

Let's try another way, with the `camcorder` package.

```{r}

library(camcorder)

# 1. Start recording
camcorder::gg_record(dir = 'workshop_datavisR2/plots',
                     device = 'png',
                     scale = 1,
                     width = 4,
                     height = 2.5,
                     units = 'in',
                     dpi = 300,
                     # if don't specify background color, 
                     # will be transparent
                     bg = 'white')


# 2. Modify plot
plot_dumbbell_upgrade_iii <- plot_dumbbell_upgrade_ii +
  theme(
    # INSERT CHANGES TO MAKE IMAGE POLISHED AGAIN
  )
  
plot_dumbbell_upgrade_iii

# 3. Stop recording
camcorder::gg_stop_recording()
```

Now, what we see is what we get!\* Notice that with camcorder, the image shows up in Rstudio's Viewer pane, not the Plots pane.

Let's tweak the design as desired and then save.

\**If your graphs look too compressed, are missing data or any components, etc., it means your components are too big to fit in the space you're requesting. You may need to reduce the size of the elements in your ggplot() call, or expand the physical dimensions of your image.*

If working with raster images, work with png to scale things, and then save as tiff in the end.

Remember that once recording is stopped, images will appear as before (distorted) when you work with them. This is because you are back to viewing them within the arbitrary dimensions of the Plot viewer window.\
Therefore, with this approach always leave recording on when working on your images, and clean up folder at the end. The following code might make that workflow easier.

```{r}

# Possible way to steamline using gg_record all the time
# **************************************************

# Create settings variables for all the elements 
# Prepend with s_* to denote settings
s_img_dir = 'workshop_datavisR2/plots'
s_img_device = 'png'
s_img_scale = 1
# could apply automatic aspect ratio calculation if desired
s_img_aspectratio = c("9/16", 9/16)
s_img_width = 7
s_img_height = s_img_width * as.numeric(s_img_aspectratio[2])
s_img_units = "in"
s_img_dpi = 300
s_img_limitsize = TRUE
s_img_device_ext = NULL
s_img_bg = "white" # ensure plot background is white, not transparent

# Creating my own record function with above settings
my_gg_record <- function(dir, device, scale, width, height,
                         units, dpi, limitsize, device_ext, bg) {
  camcorder::gg_record(dir = s_img_dir,
                       device = s_img_device,
                       scale = s_img_scale,
                       width = s_img_width,
                       height = s_img_height,
                       units = s_img_units,
                       dpi = s_img_dpi,
                       limitsize = s_img_limitsize,
                       device_ext = s_img_device_ext,
                       bg = s_img_bg)
}

# can modify only specific settings before each gg_record
# rather than needing to set all settings each time
# (also keeps a record of settings each time)
s_img_width = 12
my_gg_record()
# <work on plots that will be 12 in width here>

# Can also resize film while gg_record is on
# Note this will also resize the last plot you just made
gg_resize_film(height = 2.5, 
               width = 7,
               units = "in")

camcorder::gg_stop_recording()
```

### c. Layout

#### i. plots to use for potential layouts

```{r}

# Generate plots for multi-plot image
# **************************************

# histogram of "len"
plot1 <- ggplot(d, aes(x = len)) +
  geom_histogram(bins = 10) + 
  labs(x = s_labs_len)
plot1

# violin by "supp"
plot2 <- ggplot(d, aes(x = supp, y = len, fill = supp)) +
  geom_violin() + 
  s_fill_supp + 
  labs(x = s_labs_supp,
       y = s_labs_len) +
  # try this to get it to show
  theme(legend.position = "none")
plot2

#plot3 - violin by dose
plot3 <- ggplot(d, aes(x = len, y = as.factor(dose),  fill = supp)) +
  geom_violin() +
  s_fill_supp +
  labs(x = s_labs_len,
       y = s_labs_dose) 
plot3
```
