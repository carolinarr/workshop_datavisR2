---
title: "Data Visualization in R, Intermediate Level - Examples"
author: "<INSERT NAME HERE> and Carolina S. Roe-Raymond" 
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
---

## ISSUES TO RESOLVE

**!!! look into "identity" versus other things for stat =, position = , etc. (see ?geom_segment for example)**

**!!! don't have the right source for this dataset, actually have no idea what the units of tooth growth is...**

**!!! ggplot2 add all data points onto graphs**

**!!! fonts! can apply base_family**

## 1. Introduction

### Setup

In RStudio, under Gear icon (to the right of "\--\> Render" button), select "Chunk Output in Console."

### Data

Let's take a quick look at our dataset.

```{r}
library(summarytools) 

# get data
d <- ToothGrowth

# explore data
head(d, 15)
?ToothGrowth
dfSummary(d)
```

### **Research Question**

**Do natural supplements of vitamin C (orange juice) produce more teeth growth than\
artificial supplements of vitamin C (ascorbic acid)?**

### Default Visualization

Let's create a basic ggplot graph to answer our research question.

```{r}
library(dplyr)
library(ggplot2)

# Data Prep
# **************************************
# calculate average tooth length (len) per supplement & dosage (supp, dose)
# I use d_* to denote data
d_avg_len <- d |> 
  group_by(supp, dose) |> 
  summarise(len_avg = mean(len)) |> 
  # adding dummy rows of data to create equal increments in 'dose' data
  ungroup() |> 
  add_row(supp = "OJ", dose = 1.5, len_avg = NA) |> 
  add_row(supp = "VC", dose = 1.5, len_avg = NA) |>
  arrange(supp, dose, by_group = TRUE)

# Data Vis
# **************************************
plot_dumbbell_default <- d_avg_len |> 
  ggplot(aes(x = len_avg, y = as.factor(dose))) +
  geom_line() + 
  geom_point(
    aes(color = supp)
  ) 

plot_dumbbell_default
```

## 2. Improving Visualization Design and Workflow

To save us copying and pasting more than necessary, create variables for elements we'll be using over and over

```{r}

# SETUP 
# **************************************************
# Creating variables for elements I'll use repeatedly
# Prepend with s_* to denote settings

# labels
s_labs_supp <-"Supplement Type"
s_labs_len <- "Tooth Length \n(mm?)"
s_labs_dose <-"Dose of \nVitamin C \n(mg/day)"

# scales
s_color_supp <- scale_color_brewer(
    palette = "Dark2",
    direction  = -1,
    name = "Vitamin C Supplement Type",
    labels = c("OJ" = "Natural (Orange Juice)",
               "VC" = "Artificial (Ascorbic Acid)")
  )
s_fill_supp <- scale_fill_brewer(
    palette = "Dark2",
    direction  = -1,
    name = "Vitamin C Supplement Type",
    labels = c("OJ" = "Natural (Orange Juice)",
               "VC" = "Artificial (Ascorbic Acid)")
  )

```

### a. Design

#### i. "Data Components," Including Labels

Data components need to be dealt with within `geom_*()`, `coord_*()`, `stat_*()`, `scale_*()`, and `lab()` functions, as needed.

Let's apply the following changes to the data components here:

-   increase the size of data points
-   apply a better color scale
-   write better legend labels
-   write better plot labels (axes, title, alt text)

```{r}

# bare minimum vis design improvements with ggplot2 features
plot_dumbbell_upgrade_i <- d_avg_len |> 
  ggplot(aes(x = len_avg, y = as.factor(dose))) +
  geom_line() + 
  # increase point size
  geom_point(
    aes(color = supp),
    size = 5, 
  ) +
  # required labeling
  s_color_supp +
  labs(
    x = s_labs_len,
    y = s_labs_dose,
    title = "Natural supplements aren't always best.",
    subtitle = "At 0.5 and 1 mg/day natural supplements correspond to more teeth growth, \nbut at 2 mg/day both natural and artifical supplements have equal effects on teeth growth.",
    caption = "",
    alt = "Dumbbell plot showing natural Vitamin C supplements resulted in more teeth growth at doses of 0.5 and 1 milligrams per day, but at 2 milligrams per day both natural and artificial supplements produced similar levels of teeth growth."
  ) 

plot_dumbbell_upgrade_i
```

#### ii. "Non-Data Components"

The ggplot2 package uses themes to change what they call the "non-data" components (formatting of axes, legends, panel, plot, strip for facets).

There are [eight built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) you can easily apply. I tend to use these as a starting point.

------------------------------------------------------------------------

\*EXERCISE\*\
Choose one of ggplot2's [complete themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) and apply it your plot.

```{r}
plot_dumbbell_upgrade_ii <- plot_dumbbell_upgrade_i +
  # theme_light()
  theme_minimal()

plot_dumbbell_upgrade_ii
```

------------------------------------------------------------------------

The real benefit, though, is the ability to override settings with the `theme()` function.

```{r}

# see all the elements you have the ability to change
?theme

# check current theme settings
theme_get()

# example of applying certain 'required' adjustments 
plot_dumbbell_upgrade_ii <- plot_dumbbell_upgrade_i +
  # use a complete theme as a starting point
  theme_minimal() +
  # start applying custom adjustments
  theme(
    # easy way to adjust sizing of all of the plot's text
    text = element_text(size = 14),      
    # to refine specific aspects of text size going forward, use relative sizes
    axis.text = element_text(size = rel(0.85)),
    plot.subtitle = element_text(size = rel(0.85)),
    legend.title = element_text(size = rel(0.8)),
    legend.text = element_text(size = rel(0.7)),
    # I almost always want the title to be left-aligned with entire plot
    plot.title.position = "plot",     
    # y-axis label is always easier to read when horizontal
    axis.title.y = element_text(angle = 0,
                                vjust = 0.5),
    # to save space, often useful to put legend inside plot.
    # use c(x, y) to define where top left corner should be. 
    # c(0,0)=bottom left, c(1,1)=top right
    legend.position = (c(0.25,0.75)),
    # giving legend a slide background and no border
    legend.background = element_rect(fill="#DADADA80", 
                                     linetype = 0)
    
  )
  
plot_dumbbell_upgrade_ii
```

Let's create a default theme we can import as the default anytime we create a graph!

First check out *code/themes/ggplot2_themes_csr.qmd* document.

```{r}

# view default plot again
plot_dumbbell_default

# setup personal theme
# ************************************************

# import your theme
theme_csr_base <- readRDS('workshop_datavisR2/code/themes/theme_csr_base.rds')


# see default plot with mytheme
plot_dumbbell_default + 
  theme_csr_base

# set your theme to be your default, if desired

# view default plot (no theme)
plot_dumbbell_default
# save current theme
theme_orig <- theme_get()
# set your theme to be default
theme_set(theme_csr_base)
# no longer need to add theme to see it applied
plot_dumbbell_default
```

You can still easily modify your own theme for specific instances, to tailor it to each specific use.

Reference on the ability to get, set, and update themes: <https://ggplot2.tidyverse.org/reference/theme_get.html>

In the examples, not the differences between using...

-   `theme_update()` - modifies current default theme
    -   equivalent to `+` - modifies a specific argument of element, where all missing arguments remain as before
-   `theme_replace()`
    -   equivalent to `%+replace%` - modifies *entire* element, where all missing arguments are set to NULL

### b. Sizing

Let's save our plot the usual way, with `ggsave()`. We'd like a plot that's 7 inches wide and 3.5 inches tall.

```{r}

# let's save our latest plot
plot_dumbbell_upgrade_ii

ggsave("workshop_datavisR2/plots/dumbbell_vitC_x_toothgrowth.png", 
       plot = plot_dumbbell_upgrade_ii,
       width = 7,
       height = 2.5,
       units = "in", 
       dpi = 300)

```

What happened?

Let's try another way, with the `camcorder` package.

```{r}

library(camcorder)

# 1. Start recording
camcorder::gg_record(dir = 'workshop_datavisR2/plots',
                     device = 'png',
                     scale = 1,
                     width = 7,
                     height = 2.5,
                     units = 'in',
                     dpi = 300,
                     # if don't specify background color, will be transparent
                     bg = 'white')


# 2. Create plot
plot_dumbbell_upgrade_iii <- d_avg_len |> 
  ggplot(aes(x = len_avg, y = as.factor(dose))) +
  geom_line() + 
  geom_point(
    aes(color = supp),
    # increase point size
    size = 4, 
  ) +
  # required labeling
  s_color_supp +
  labs(
    x = s_labs_len,
    y = s_labs_dose,
    title = "Natural supplements aren't always best.",
    subtitle = "At 0.5 and 1 mg/day natural supplements correspond to more teeth growth, \nbut at 2 mg/day both natural and artifical supplements have equal effects on teeth growth.",
    caption = "",
    alt = "Dumbbell plot showing natural Vitamin C supplements resulted in more teeth growth at doses of 0.5 and 1 milligrams per day, but at 2 milligrams per day both natural and artificial supplements produced similar levels of teeth growth."
  )  + 
  theme_csr_base +
  theme(
    text = element_text(size = 12),      # increase size of all text
    axis.text = element_text(size = rel(0.7)),
    axis.title = element_text(size = rel(0.75)),
    axis.title.y = element_text(angle = 0,
                                vjust = 0.5),
    legend.position = (c(0.2,0.7)),      # to place legend inside plot,
                                         #    c(0,0)=bottom left, 
                                         #    c(1,1)=top right
    legend.title = element_text(size = rel(0.7)),
    legend.text = element_text(size = rel(0.7)),
    legend.background = element_rect(fill="#DADADA80", 
                                     linetype = 0),
    plot.title.position = "plot",         # left-align title with entire plot
    plot.title = element_text(size = rel(1),
                              face = "bold",
                              margin = margin(t = 3,
                                              r = 0,
                                              b = 3,
                                              l = 0,
                                              unit = "pt")),
    plot.subtitle = element_text(size = rel(0.9),
                                 margin = margin(t = 5,
                                                 r = 0, 
                                                 b = 15, 
                                                 l = 0,
                                                 unit = "pt"))
    
  )
  
plot_dumbbell_upgrade_iii

# 3. Stop recording
camcorder::gg_stop_recording()
```

Now, what we see is what we get!\* Notice that what shows up in Rstudio is in the Viewer pane, not the Plots pane.

Let's tweak the design as desired and then save.

\**If your graphs look too compressed, are missing data or any components, etc., it means your components are too big to fit in the space you're requesting. You may need to reduce the size of the elements in your ggplot() call, or expand the physical dimensions of your image.*

Drawbacks to this approach:

1.  This only works for images produced with ggplot2 and patchwork.
2.  Once recording is stopped, images will appear as before (distorted) when you work with them. This is because you are back to viewing them within the arbitrary dimensions of the Plot viewer window.\
    Therefore, with this approach always leave recording on when working on your images, and clean up folder at the end.

```{r}

# Possible way to steamline using gg_record all the time
# **************************************************

# Create settings variables for all the elements 
# Prepend with s_* to denote settings
s_img_dir = 'workshop_datavisR2/plots'
s_img_device = 'png'
s_img_scale = 1
# could apply automatic aspect ratio calculation if desired
s_img_aspectratio = c("9/16", 9/16)
s_img_width = 7
s_img_height = s_img_width * as.numeric(s_img_aspectratio[2])
s_img_units = "in"
s_img_dpi = 300
s_img_limitsize = TRUE
s_img_device_ext = NULL
s_img_bg = "white" # ensure plot background is white, not transparent

# Creating my own record function with above settings
my_gg_record <- function(dir, device, scale, width, height,
                         units, dpi, limitsize, device_ext, bg) {
  camcorder::gg_record(dir = s_img_dir,
                       device = s_img_device,
                       scale = s_img_scale,
                       width = s_img_width,
                       height = s_img_height,
                       units = s_img_units,
                       dpi = s_img_dpi,
                       limitsize = s_img_limitsize,
                       device_ext = s_img_device_ext,
                       bg = s_img_bg)
}

# Example use
# can modify only specific settings before each gg_record
# rather than needing to set all settings each time
# (also keeps a record of settings each time)
s_img_width = 12
my_gg_record()
# <work on plots that will be 12 in width here>

# Can also resize film while gg_record is on
# Note this will also resize the last plot you just made
gg_resize_film(height = 2.5, 
               width = 7,
               units = "in")

camcorder::gg_stop_recording()
```

### c. Layout

There are various packages that can create multi-image layouts, but we'll focus on an example from the `ggpubr` package here.

#### i. ggpubr Example

```{r}

# Generate plots for multi-plot image
# **************************************

# histogram of len
plot1 <- ggplot(d, aes(x = len)) +
  geom_histogram(bins = 10) + 
  labs(x = s_labs_len)
plot1

# violin by supp
plot2 <- ggplot(d, aes(x = supp, y = len, fill = supp)) +
  geom_violin() + 
  s_fill_supp + 
  labs(x = s_labs_supp,
       y = s_labs_len) +
  # try this to get it to show
  theme(legend.position = "none")
plot2

# dumbbell plot with dose and supp
plot3 <- plot_dumbbell_upgrade_iii +
  labs(title = NULL,
       subtitle = NULL)
  # +theme(legend.position = "none")
plot3

library(ggpubr)

# [Side-note]
# ************
# this package has other graphs you can use
# see https://rpkgs.datanovia.com/ggpubr/
# for example:
mtcars$cyl <- as.factor(mtcars$cyl)
ggscatter(mtcars, x = "wt", y = "mpg",
                add = "reg.line",               # Add regression line
                conf.int = TRUE,                # Add confidence interval
                color = "cyl", palette = "jco", # Color by groups "cyl"
                shape = "cyl"                   # Change point shape by groups
                )+
  stat_cor(aes(color = cyl), label.x = 3)       # Add correlation coefficient
# example source: 
# http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/81-ggplot2-easy-way-to-mix-multiple-graphs-on-the-same-page/
# ************

# Combine and arrange the plots using ggarrange
plot_123 <- ggarrange(plot1, plot2, plot3 + rremove("legend"),
                      labels = c("A", "B", "C"),
                      font.label = list(size = 14, 
                                        face="bold", 
                                        color="black"),
                      nrow = 2, 
                      heights = c(2.5, 2.5),
                      widths = c(3.5, 3.5),
                      ncol = 2,
                      # align plots horizontally and vertically                   
                      align = "hv",
                      # unique to ggpubr?
                      common.legend = TRUE, 
                      #legend.grob = get_legend(plot3),
                      legend = "top") 
plot_123_nest <- ggarrange(plot3 + rremove("legend"),
                      ggarrange(plot1, plot2, ncol = 2, labels = c("B", "C")),
                      labels = c("A"),
                      font.label = list(size = 14, 
                                        face="bold", 
                                        color="black"),
                      nrow = 2, 
                      heights = c(2.5, 2.5),
                      widths = c(3.5, 3.5),
                      #ncol = 2,
                      # align plots horizontally and vertically                   
                      align = "h",
                      # unique to ggpubr?
                      common.legend = TRUE, 
                      #legend.grob = get_legend(plot3),
                      legend = "top") 

annotate_figure(plot_123_nest,
                fig.lab = "Figure 1", 
                fig.lab.face = "bold",
                top = text_grob("Vitamin C and Tooth Length", 
                                color = "#d95f02", 
                                face = "bold", 
                                size = 14),
                bottom = text_grob("Data source: Rt", 
                                   color = "gray",
                                   hjust = 1, 
                                   x = 1, 
                                   face = "italic", 
                                   size = 10),
                left = text_grob("I could \nput text here", 
                                 color = "#1b9e77"),
                right = "I'm done, thanks :-)!")

# Let's save
ggsave("workshop_datavisR2/plots/plot_123_nest.png", 
       plot_123_nest, 
       width = 7, 
       height = 5, 
       units = "in")


library(patchwork)

# Create multi-plot image
# **************************************
# Arrange the plots using patchwork
combined_plot <- (plot1 | plot2) / plot3 +
  plot_annotation(tag_levels = 'I') + # annotate plots
  plot_layout(widths = c(3.5, 3.5)) +  # widths are the relative sizes of columns
  plot_layout(heights = c(2.5, 2.5)) + # heights are the relative sizes of rows
  # make background of plot white
  theme(plot.background = element_rect(fill = "white", color = "white"))

combined_plot

ggsave("workshop_datavisR2/plots/combined_plot.png", 
       combined_plot,
       width = 7,
       height = 5,
       units = "in")

```

#### ii. Working with svg's and Adobe InDesign

Alternatively, to maintain your workflow with camcorder, you can combine the use of svg's and Adobe InDesign.

Steps:

1.  Draw a mockup of your multi-plot image, with the needed physical dimensions of each plot.

2.  Use `gg_record()` to view your images as .pngs with the correct dimensions, tweak as necessary.

3.  Save each 'final' image as an .svg file.

4.  Open Adobe InDesign (get [free access through Princeton](https://oit.princeton.edu/creativecloud)) and create a document with your overall dimensions. Use Rectangle Frame Tool is desired to create layout. Drag your images into the right place.

5.  To save, within Adobe InDesign go to **File** menu \> choose **Export...** Save as .png file.

```{r}

library(svglite)

# SETTINGS
s_img_device = "svg"
s_img_width = 3.5
s_img_height = 2.5
s_img_units = "in"
s_img_dpi = 300

# Start recording
my_gg_record()

# plot1 - histogram of len
ggplot(d, aes(x = len)) +
  geom_histogram(bins = 10) + 
  labs(x = s_labs_len)

# plot2 - violin by supp
ggplot(d, aes(x = supp, y = len, fill = supp)) +
  geom_violin() + 
  s_fill_supp + 
  labs(x = s_labs_supp,
       y = s_labs_len) +
  # try this to get it to show
  theme(legend.position = "none")

gg_resize_film(height = 2.5, 
               width = 7,
               units = "in")

# plot3 - dumbbell plot with dose and supp
plot_dumbbell_upgrade_iii +
  labs(title = NULL,
       subtitle = NULL)
  # +theme(legend.position = "none")

camcorder::gg_stop_recording() 

#plot3 - violin by dose
ggplot(d, aes(x = len, y = as.factor(dose),  fill = supp)) +
  geom_violin() +
  s_fill_supp +
  labs(x = s_labs_len,
       y = s_labs_dose)
```
